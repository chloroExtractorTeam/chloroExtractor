#!/usr/bin/env perl
#-----------------------------------------------------------------------------#
# ptx pipeline
ptx => {
        jellyfish_bin => "",    # assume exported
        bowtie2_bin => "",      # assume exported
        velvet_bin => "",       # assume exported
        blast_bin => "",        # assume exported
        phrap_bin => "",
        continue => "",         # ""=TRUE, undef=FALSE   continues your last canceled run
        threads => 2,           # Number of Threads used by several tasks 
        kmer_size => 31,        # The size of the used kmers
        tasks => [
                  {             # Check dependencies
                   id => 'dep',
                   cmd => [qw(%bin%check_dependencies.pl)],
                  },
                  {             # run jellyfish
                   id => 'jf0', 
                   cmd => [qw(
                               %opt{jellyfish_bin}%jellyfish count 
                               -t %opt{threads}% 
                               -m %opt{kmer_size}% 
                               -s 500M -C 
                               -o %%.jf 
                               %opt{reads}% %opt{mates}%
                            )]
                  },
                  {             # Scale reads data set to 200X
                   id => 'scr', 
                   parser => parse_csv,
                   cmd => [qw( 
                               %bin%scale_reads.pl
                               -1 %opt{reads}%
                               -2 %opt{mates}% 
                               --ref-cluster %bin%/../data/cds-nr98-core.fa
                               --kmer-size %opt{kmer_size}%
                               --out %%
                               --threads %opt{threads}%
                               -c %opt{core_config}% %opt{config}%
                               %opt{_log_level}%
                            )],
                  },
                  {             # run jellyfish
                   id => 'jf1', 
                   cmd => [qw(
                               %opt{jellyfish_bin}%jellyfish count 
                               -t %opt{threads}% 
                               -m %opt{kmer_size}% 
                               -s 500M -C 
                               -o %{scr}%.jf 
                               %{scr}%_[12].fq
                            )]
                  },
                  {             # filter kmer based
                   id => 'kfr1',
                   cmd => [qw(
                               %bin%kmer_filter_reads.pl 
                               -1 %{scr}%_1.fq -2 %{scr}%_2.fq 
                               --kmer-hash %{scr}%.jf
                               --kmer-size %opt{kmer_size}% 
                               --out %%
                               -c %opt{core_config}% %opt{config}%
                               %opt{_log_level}%
                            )]
                  },
                  {             # run jellyfish again
                   id => 'jf2',
                   cmd => [qw(
                               %opt{jellyfish_bin}%jellyfish count 
                               -t %opt{threads}% 
                               -m %opt{kmer_size}% 
                               -s 500M -C 
                               -o %[-1]%.jf 
                               %[-1]%_[12].fq
                            )]
                  },
                  {             # filter kmer based again
                   id => 'kfr2',
                   cmd => [qw(
                               %bin%kmer_filter_reads.pl 
                               -1 %[-2]%_1.fq -2 %[-2]%_2.fq 
                               --kmer-hash %[-2]%.jf
                               --kmer-size %opt{kmer_size}% 
                               --out %%
                               -c %opt{core_config}% %opt{config}%
                               %opt{_log_level}%
                            )]
                  },
                  {
                   id => 'jf3',
                   cmd => [qw(
                               %opt{jellyfish_bin}%jellyfish count 
                               -t %opt{threads}% 
                               -m %opt{kmer_size}% 
                               -s 500M -C 
                               -o %[-1]%.jf 
                               %[-1]%_[12].fq
                            )]
                  },
                  {
                   id => 'kfr:plot',
                   parser => parse_csv,
                   cmd => [qw(R --vanilla --slave --args kfr %{scr}%.jf %{kfr1}%.jf %{kfr2}%.jf <%bin%make_plots.R)],
                  },
                  {
                   id => 'mre0',
                   cmd => [qw(
                               gs
                               -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite
                               -sOutputFile=ptx.pdf
                                scr-seeds.pdf
                                kfr.pdf
                            )],
                  },

	          {   # assemble with spades
		      id => 'ass',
		      cmd => [qw(
                                  %bin%assemble_spades.pl
                                  -1 %{kfr2}%_1.fq
                                  -2 %{kfr2}%_2.fq
                                  -o %%
                                  --threads %opt{threads}%
	                     )],
                  },
  	          { # find cyclic graph
		      id => 'fcg',
		      cmd => [qw(
                                 %bin%find_cyclic_graph.pl
                                 --in ass/assembly_graph.fastg
                                 --blastdb %bin%/../data/cds.nr98.fa
                                 --out %%.fa
                             )]
		  },
	          # {             # decontaminate
                  #  id => 'fic',
                  #  cmd => [qw(
                  #              %bin%filter_contigs.pl
                  #              --in %[-1]%.fa
                  #              --blast_db %bin%/../data/cds.nr98.fa
                  #              --blast-bin "%opt{blast_bin}%"
                  #              -c %opt{core_config}% %opt{config}%
                  #              %opt{_log_level}%
                  #           )],
                  # },
                  # {             # process inverted repeat
                  #  id => 'mir',
                  #  cmd => [qw(
                  #              %bin%make_inverted_repeats.pl
                  #              --in %[-2]%.fil.fa
                  #              --out %%.fa
                  #              %opt{_log_level}%
                  #           )],
                  # },
                  {
                   id => 'mre1',
                   cmd => [qw(
                               gs
                               -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite
                               -sOutputFile=ptx.pdf
                                scr-seeds.pdf
                                kfr.pdf
                            )],
                  },
                  
                 ],
       },

#------------------------------------------------------------------------------#
# scale_reads.pl
  scr => {
          target_coverage => 50,
          max_reads => 10000,

          # bowtie2 options
          bowtie2_params => [qw(
                                 --no-unal
                                 --n-ceil C,0,0
                                 --very-sensitive
                              )],
         }, 

  # kmer_filter
  kfr => {
          cutoff => "100%",
          lower => 30,
          upper => 1000,
          "penalize-N" => 1,
          "kmer-shift" =>  1,
          "perl-hash" => 1, 
         },

  # reads_ref_map
  rrm => {
          # bowtie2 options
          bowtie2_params => [qw(
                                 --no-unal
                                 --n-ceil C,0,0
                                 --very-sensitive
                              )],
         }, 


  # assemble_reads.pl
  asr => {
          outkmer => [qw(33 39 45 51 57 63 69 75 81 87 93)],
          workingdir => "./",
          velveth_parameter => '33,99,6',
          velvetg_parameter => '',
          velvet_out => "velvet_out",
         }, 

  fic => {
          blast_db => undef,
          blast_options => [qw(-max_target_seqs 1 -evalue 1e-10 -outfmt), "'6 qseqid'"],
          seqfilter_options => [qw(--min-length 500)],
         }, 

  asc => {
          workingdir => './',
          overwrite => 1,
         }, 

  # extend_contigs.pl
  exc => {
          min_seq_length => 1000,
          bowtie2_log => './bowtie2.log',
         }, 

  mir => {
         }, 
