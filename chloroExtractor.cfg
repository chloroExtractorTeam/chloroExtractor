#!/usr/bin/env perl
#------------------------------------------------------------------------------#
# global chloroExtractor options
threads => 8,
reads => [qw()],
mates => [qw()],
out => undef,

#------------------------------------------------------------------------------#
# scale_reads.pl
scr => {
    reads => undef,
    mates => undef,
    out => 'scr', 
    ref_cluster => undef,
    target_coverage => 200,
    min_single_coverage => 20,
    min_covered_CDS => 25,
    coverage_check_interval => 20000,

    # currently only bowtie2 is fully implemented
    # # shrimp (gmapper-ls) options
    # gmapper_ls_path => '/software/shrimp/bin/gmapper-ls',
    # gmapper_ls_log => './shrimp.log',
    # gmapper_ls_params => {
    # 	"--qv-offset" => 33, 
    # 	"--all-contigs" => "",
    # 	"--single-best-mapping" => "",
    # 	"-h" => "95%",
    # 	"--seeds" => "w12",
    # 	"-N" => 10,
    # },

    # bowtie2 options
    bowtie2_path => "/software/bowtie2/",
    bowtie2_DB => undef,
    bowtie2_log => './bowtie2.log',
    bowtie2_params => {
	"--no-unal" => "",
    },
}, 

#------------------------------------------------------------------------------#
# jellyfish reads
jfr => {
    jf_opt => [qw(-m 31 -s 500M -o scr.jf -C)],
    jf_opt2 => [qw(-m 31 -s 500M -o kfr.jf -C)],
    jf_in => [qw(scr_1.fq scr_2.fq)],
    jf_in2 => [qw(kfr_1.fq kfr_2.fq)]
}, 


#------------------------------------------------------------------------------#
# peak_detection.pl
ped => {}, 


#------------------------------------------------------------------------------#
# kmer_filter_reads.pl
kfr => {
    reads => [],
    mates => [],
    'kmer-hash' => '',
    out => ,
    cutoff => '100%',
    lower => 40,
    upper => 1000,
    'penalize-N' => 1,
    'kmer-shift' => 1,
    'perl-hash' => 1,
    'kmer-size' => 31,
}, 


#------------------------------------------------------------------------------#
# assemble_reads.pl
asr => {
    reads => [],
    mates => [],
    out => "asr.fa",
    outkmer => [qw(33 39 45 51 57 63 69 75 81 87 93)],
    workingdir => "./",
    velvet_path => '/software/velvet/',
    velveth_parameter => '33,99,6',
    velvetg_parameter => '',
    velvet_out => "velvet_out",
}, 


#------------------------------------------------------------------------------#
# filter_contigs.pl
fic => {
    blast_db => undef,
    blast_binary => 'blastn', # assume exported
    blast_options => [qw(-max_target_seqs 1 -evalue 1e-5 -outfmt), "'6 qseqid'"],
    seqfilter_options => [qw(--min-length 500)],
}, 


#------------------------------------------------------------------------------#
# assemble_contigs.pl
asc => {
    phrap_path => '/software/phrap/',
    workingdir => './',
    overwrite => 0,
}, 


#------------------------------------------------------------------------------#
# extend_contigs.pl
exc => {
    min_seq_length => 1000,
    bowtie2_path => '/software/bowtie2/',
    bowtie2_log => './bowtie2.log',
    reads => 'scr_1.fq',
    mates => 'scr_2.fq',
}, 


#------------------------------------------------------------------------------#
# make_inverted_repeat.pl
mir => {
    blast_path => '/usr/bin/',
}, 



