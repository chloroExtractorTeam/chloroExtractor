#!/usr/bin/env perl

=head1 NAME

chloroExtactor

=head1 DESCRIPTION

??

=head1 SYNOPSIS

  $ ./chloroExtractor -1 <FQ_1> -2 <FQ_2> -o <ID> <OPTIONS>

=head1 OPTIONS

=over

=item -1|--reads

Input reads file, first of pair.

=item -2|--mates

Input reads file, second of pair

=item -d|--dir [.]

Path to a working directory. Will be created. If exists, needs to be empty.

=item -o|--out

Output file basename, e.g. species id.

=item overwrite

Overwrite non-empty output directory.

=item --create-config

Create a config file with default settings for user customization.

=item -c|--config

Use user customized config file. Superseeds default config.

=item -V|--version

Display version.

=item -h|--help

Display this help.

=back

=head1 CHANGELOG

see git log.

=head1 TODO

=head1 CODE

=cut

#-----------------------------------------------------------------------------#
# Modules

# core
use strict;
use warnings;
no warnings 'qw';

use Carp;
use Getopt::Long qw(:config no_ignore_case bundling);
use Pod::Usage;
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;

use FindBin qw($RealBin);
use lib "$RealBin/../lib/";

use File::Basename;
use File::Copy;
use File::Path;
use File::Spec;

use List::MoreUtils;
# additional modules
use Cfg;



#-----------------------------------------------------------------------------#
# Globals

our $VERSION = 0.01;

# get a logger
my $L = Log::Log4perl::get_logger();
Log::Log4perl->init( \q(
	log4perl.rootLogger                     = INFO, Screen
	log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
	log4perl.appender.Screen.stderr         = 1
	log4perl.appender.Screen.layout         = PatternLayout
	log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [CpE] %m%n
));


#-----------------------------------------------------------------------------#
# Config

# core
my $core_cfg = "$RealBin/../chloroExtractor.cfg";
my %cfg = Cfg->Read_Cfg($core_cfg); 

# user defaults and overwrite core
my $user_cfg;
for(my $i=0; $i<@ARGV; $i++){
        if($ARGV[$i] =~ /-c$|--config$/){
                $user_cfg = $ARGV[$i+1];
                last;
        }
}

my %opt = %cfg = (%cfg, Cfg->Read_Cfg($user_cfg)) if $user_cfg; # simple overwrite


#-----------------------------------------------------------------------------#
# GetOptions

GetOptions( # use %opt (Cfg) as defaults
	\%opt, qw(
                out|o=s
                dir|d=s
                reads|1=s@
                mates|2=s@
		threads|t=i
		overwrite!
		version|V!
		debug|D!
		help|h!
		config|c=s
	)
) or $L->logcroak('Failed to "GetOptions"');

# help
$opt{help} && pod2usage(1);

# version
if($opt{version}){
	print "$VERSION\n"; 
	exit 0;
}


# required stuff  
for(qw(reads mates out)){
    if(ref $opt{$_} eq 'ARRAY'){
	pod2usage("required: --$_") unless @{$opt{$_}}
    }else{
	pod2usage("required: --$_") unless defined ($opt{$_})
    }
};


# debug level
$L->level($DEBUG) if $opt{debug};
$L->debug('Verbose level set to DEBUG');

$L->debug(Dumper(\%opt));



#-----------------------------------------------------------------------------#
# MAIN

# rel2abs

@{$opt{reads}} = map{File::Spec->rel2abs($_)}@{$opt{reads}};  
@{$opt{mates}} = map{File::Spec->rel2abs($_)}@{$opt{mates}};  


# prepare folder structure
prep_dir($opt{dir} || '.', $opt{overwrite});

File::Path::make_path($opt{dir}, {
    verbose => $opt{debug} ? 1 : 0
});

my @tasks = qw(
    scr
    ped
    kfr
    asr
    fic
    asc
    exc
    mir
);

if($opt{dir}){
    chdir($opt{dir}) || $L->logcroak("'$opt{dir}' ",$!);
}

File::Path::make_path(@tasks, {
    verbose => $opt{debug} ? 1 : 0
});


my $task;
my @re;
my @cmd;

# scale_reads.pl



$task = "scr";
$L->info("Task: scale_reads.pl [$task]");

chdir($task);

@cmd = ("$RealBin/scale_reads.pl", "-1", "@{$opt{reads}}", "-2", "@{$opt{mates}}", "-r", "$RealBin/../data/cds.nr98.fa", $opt{debug} ? '--debug' : () );
$L->debug("Running: @cmd");

@re = qx(@cmd);

$L->logdie($@) if $@;
$L->debug("Returned: ",@re);


#------------------------------------------------------------------------------#

# prep_dir(dirname=s, overwrite!)
sub prep_dir{
    my ($dir, $overwrite) = (@_, 0);
    if(-e $dir){
	if(-d $dir){
	    if($overwrite){
		File::Path::remove_tree($dir);
	    }else{
		$L->logdie("'$dir': directory already exists and is not empty")
		    unless is_empty_dir($dir);
	    }
	}else{
	    $L->logdie("'$dir': already exists, yet is no directory")
	}
    }    
}


# is_empty_dir( dir )                                                                   # Check whether a folder contains any files.                                            

sub is_empty_dir {
    my $dirname = shift;
    opendir(my $dh, $dirname) or die "Not a directory";
    return scalar(grep { $_ ne "." && $_ ne ".." } readdir($dh)) == 0;
}








#-----------------------------------------------------------------------------#

=head1 AUTHOR

Clemens Weiss S<clemens.weiss@stud-mail.uni-wuerzburg.de>

Thomas Hackl S<thomas.hackl@uni-wuerzburg.de>

=cut
