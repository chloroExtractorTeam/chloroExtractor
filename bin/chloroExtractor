#!/usr/bin/env perl

=head1 NAME

chloroExtactor

=head1 DESCRIPTION

??

=head1 SYNOPSIS

  $ ./chloroExtractor -1 <FQ_1> -2 <FQ_2> -o <ID> <OPTIONS>

=head1 OPTIONS

=over

=item -1|--reads

Input reads file, first of pair.

=item -2|--mates

Input reads file, second of pair

=item -d|--dir [.]

Path to a working directory. Will be created. If exists, needs to be empty.

=item -o|--out

Output file basename, e.g. species id.

=item --overwrite

Overwrite non-empty output directory.

=item --create-config

Create a config file with default settings for user customization.

=item -c|--config

Use user customized config file. Superseeds default config.

=item -V|--version

Display version.

=item -h|--help

Display this help.

=back

=head1 CHANGELOG

see git log.

=head1 TODO

=head1 CODE

=cut

#-----------------------------------------------------------------------------#
# Modules

# core
use strict;
use warnings;
no warnings 'qw';

use Carp;
use Getopt::Long qw(:config no_ignore_case bundling);
use Pod::Usage;
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;

use FindBin qw($RealBin);
use lib "$RealBin/../lib/";

use File::Basename;
use File::Copy;
use File::Path;
use File::Spec;

use List::MoreUtils;
# additional modules
use Cfg;



#-----------------------------------------------------------------------------#
# Globals

our $VERSION = 0.02;

# get a logger
my $L = Log::Log4perl::get_logger();
Log::Log4perl->init( \q(
	log4perl.rootLogger                     = INFO, Screen
	log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
	log4perl.appender.Screen.stderr         = 1
	log4perl.appender.Screen.layout         = PatternLayout
	log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [CpE] %m%n
));


#-----------------------------------------------------------------------------#
# Config

# core
my $core_cfg = "$RealBin/../chloroExtractor.cfg";
my %cfg = Cfg->Read_Cfg($core_cfg); 

# user defaults and overwrite core
my $user_cfg;
for(my $i=0; $i<@ARGV; $i++){
        if($ARGV[$i] =~ /-c$|--config$/){
                $user_cfg = $ARGV[$i+1];
                last;
        }
}

my %opt = %cfg;
if ($user_cfg)
{
    %opt = (%cfg, Cfg->Read_Cfg($user_cfg));
}


#-----------------------------------------------------------------------------#
# GetOptions

GetOptions( # use %opt (Cfg) as defaults
	\%opt, qw(
                out|o=s
                dir|d=s
                reads|1=s@
                mates|2=s@
                insert_size|insert-size=i
		threads|t=i
		overwrite!
		version|V!
		create_config|create-config
		debug|D!
		help|h!
		config|c=s
	)
) or $L->logcroak('Failed to "GetOptions"');

# help
$opt{help} && pod2usage(1);

# version
if($opt{version}){
	print "$VERSION\n"; 
	exit 0;
}

# create template for user cfg
if($opt{create_config}){
	pod2usage(-msg => 'To many arguments', -exitval=>1) if @ARGV > 1;
	my $user_cfg = @ARGV ? $ARGV[0] : basename($core_cfg);
	copy($core_cfg, $user_cfg) or $L->logdie("Creatring config failed: $!");
	$L->info("Created config file: $user_cfg");
	exit 0;
}


# required stuff  
for(qw(reads mates out)){
    if(ref $opt{$_} eq 'ARRAY'){
	pod2usage("required: --$_") unless @{$opt{$_}}
    }else{
	pod2usage("required: --$_") unless defined ($opt{$_})
    }
};


# debug level
$L->level($DEBUG) if $opt{debug};
$L->debug('Verbose level set to DEBUG');

$L->debug(Dumper(\%opt));



#-----------------------------------------------------------------------------#
# MAIN

# rel2abs

@{$opt{reads}} = map{File::Spec->rel2abs($_)}@{$opt{reads}};  
@{$opt{mates}} = map{File::Spec->rel2abs($_)}@{$opt{mates}};  

$opt{data_cds} = File::Spec->rel2abs($RealBin.'/../data/cds.nr98.fa');
$opt{config} = File::Spec->rel2abs($opt{config}) if $opt{config};


# prepare folder structure
prep_dir($opt{dir} || '.', $opt{overwrite});

File::Path::make_path($opt{dir}, {
    verbose => $opt{debug} ? 1 : 0
});


if($opt{dir}){
    chdir($opt{dir}) || $L->logcroak("'$opt{dir}' ",$!);
}


my $task;
my @re;
my @cmd;

#----------------#
# scale_reads.pl #

$task = 'scale_reads.pl';
$L->info("Task: $task");

@cmd = (
    "$RealBin/$task", 
    "-1" => "@{$opt{reads}}", 
    "-2" => "@{$opt{mates}}", 
    "-r" => $opt{data_cds}, 
    $opt{config} ? ("-c" => $opt{config}) : (),
    $opt{debug} ? '--debug' : () 
);

$L->debug("Running: @cmd");
@re = qx(@cmd);

$L->logcroak() if ($? || $@);
$L->debug("Returned: ",@re);

my ($est_insert_size) = pop(@re) =~ /(\d+)/;
my ($est_coverage) = pop(@re) =~ /(\d+)/;

$L->debug("Cov: $est_coverage");
$L->debug("Isize: $est_insert_size");


#---------------#
# kmer spectrum #

$task = 'building kmer spectrum';
$L->info("Task: $task");

use Jellyfish;
my $jf = Jellyfish->new();
$jf->run(['count', @{$opt{jfr}{jf_opt}}, '-t', $opt{threads} , @{$opt{jfr}{jf_in}}]);

$L->logcroak() if ($? || $@);
$L->debug("Returned: ",@re);


#-------------------#
# peak detection.pl #

# NA


#----------------------#
# kmer_filter_reads.pl #

$task = 'kmer_filter_reads.pl';
$L->info("Task: $task");

@cmd = (
    "$RealBin/$task", 
    $opt{config} ? ("-c" => $opt{config}) : (),
    $opt{debug} ? '--debug' : () 
);

$L->debug("Running: @cmd");
@re = qx(@cmd);

$L->logcroak() if ($? || $@);
$L->debug("Returned: ",@re);



#-------------------#
# assemble_reads.pl #

$task = 'assemble_reads.pl';
$L->info("Task: $task");

@cmd = (
    "$RealBin/$task",
    $opt{config} ? ("-c" => $opt{config}) : (),
    $opt{debug} ? '--debug' : (),
    '--isize', $est_insert_size,
    '--reads', 'kfr_1.fq',
    '--mates', 'kfr_2.fq',
    # isize: $opt{insert_size} || $est_insert_size
);

$L->debug("Running: @cmd");
@re = qx(@cmd);

$L->logcroak if ($? || $@);
$L->debug("Returned: ",@re);



#-------------------#
# filter_contigs.pl #

# $task = 'filter_contigs.pl';
# $L->info("Task: $task");

# @cmd = (
#     "$RealBin/$task",
#     $opt{config} ? ("-c" => $opt{config}) : (),
#     $opt{debug} ? '--debug' : (), 
#     '--blast_db' => $opt{data_cds},
#     '--in', 'asr.fa'
# );

# $L->debug("Running: @cmd");
# @re = qx(@cmd);

# $L->logcroak if ($? || $@);
# $L->debug("Returned: ",@re);


#---------------------#
# assemble_contigs.pl #

$task = 'assemble_contigs.pl';
$L->info("Task: $task");

@cmd = (
    "$RealBin/$task",
    $opt{debug} ? '--debug' : (),
    '--in', 'asr.fa',
    '--out', 'asc.fa',
);

$L->debug("Running: @cmd");
@re = qx(@cmd);

$L->logcroak if ($? || $@);
$L->debug("Returned: ",@re);



#-------------------#
# extend_contigs.pl #

$task = 'extend_contigs.pl';
$L->info("Task: $task");

@cmd = (
    "$RealBin/$task",
    $opt{config} ? ("-c" => $opt{config}) : (),
    $opt{debug} ? '--debug' : (),
    '--in', 'asc.fa',
    '--out', 'extended.fa',
    '--isize', $est_insert_size,
);

$L->debug("Running: @cmd");
@re = qx(@cmd);

$L->logcroak if $@;
$L->debug("Returned: ",@re);


#---------------------#
# assemble_contigs.pl #

$task = 'assemble_contigs.pl';
$L->info("Task: $task");

@cmd = (
    "$RealBin/$task",
    $opt{debug} ? '--debug' : (),
    '--in', 'extended.fa',
    '--in', 'asc.fa',
    '--out', 'patched_final.fa',
);

$L->debug("Running: @cmd");
@re = qx(@cmd);

$L->logcroak if ($? || $@);
$L->debug("Returned: ",@re);

#-------------------#
# filter_contigs.pl # (again)

$task = 'filter_contigs.pl';
$L->info("Task: $task");

@cmd = (
    "$RealBin/$task",
    $opt{config} ? ("-c" => $opt{config}) : (),
    $opt{debug} ? '--debug' : (), 
    '--blast_db' => $opt{data_cds},
    '--in', 'patched_final.fa'
);

$L->debug("Running: @cmd");
@re = qx(@cmd);

$L->logcroak if ($? || $@);
$L->debug("Returned: ",@re);



#-------------------------#
# make_inverted_repeat.pl #

$task = 'make_inverted_repeats.pl';
$L->info("Task: $task");

@cmd = (
    "$RealBin/$task",
    $opt{config} ? ("-c" => $opt{config}) : (),
    $opt{debug} ? '--debug' : () 
);

$L->debug("Running: @cmd");
@re = qx(@cmd);

$L->logcroak if ($? || $@);
$L->debug("Returned: ",@re);




#------------------------------------------------------------------------------#
# prep_dir(dirname=s, overwrite!)
sub prep_dir{
    my ($dir, $overwrite) = (@_, 0);
    if(-e $dir){
	if(-d $dir){
	    if($overwrite){
		File::Path::remove_tree($dir);
	    }else{
		$L->logdie("'$dir': directory already exists and is not empty")
		    unless is_empty_dir($dir);
	    }
	}else{
	    $L->logdie("'$dir': already exists, yet is no directory")
	}
    }    
}


# is_empty_dir( dir )                                                                   # Check whether a folder contains any files.                                            

sub is_empty_dir {
    my $dirname = shift;
    opendir(my $dh, $dirname) or die "Not a directory";
    return scalar(grep { $_ ne "." && $_ ne ".." } readdir($dh)) == 0;
}








#-----------------------------------------------------------------------------#

=head1 AUTHOR

Thomas Hackl S<thomas.hackl@uni-wuerzburg.de>

Markus Ankenbrand S<markus.ankenbrand@stud-mail.uni-wuerzburg.de>

Niklas Terhoeven S<niklaus.terhoeven@stud-mail.uni-wuerzburg.de>

Clemens Weiss S<clemens.weiss@stud-mail.uni-wuerzburg.de>

Frank Foerster S<frank.foerster@biozentrum.uni-wuerzburg.de>

=cut


